// this is the code for sieve of erastothene

vector<int>seive(int n){
	vector<int>arr(n+1,0);
	vector<int>primes;
	for(int i=2;i<=n;i++){
		if(arr[i]==0)primes.push_back(i);
		for(int j=i*i;j<=n;j+=i){
			arr[j]=1;
		}
	}
	return primes;
}

///////////////////////////////////////////

this is the calculation of ncr for the values greater than n>=1000 ie. it can calculate the values upto 1e5 and only condition applied is that m must be a prime .


#include<bits/stdc++.h>
using namespace std;
const int M=1e9+7;
#define int long long

vector<int>fact,inverse_fact;
int pow_expo(int a,int b,int mod){
	int res=1;
	while(b>0){
		if(b&1)res=(res*a)%mod;
		a=(a*a)%mod;
		b/=2;
	}
	return res;
}

void precompute_fact(int n){
	fact.resize(n+1);
	inverse_fact.resize(n+1);
	fact[0]=1;
	for(int i=1;i<=n;i++){
		fact[i]=(fact[i-1]*i)%M;
	}
	inverse_fact[n]=pow_expo(fact[n],M-2,M) ; // thsi is according to the fermat little theorem.
  for(int i=n-1;i>=0;i--){
  	inverse_fact[i]=(inverse_fact[i+1]*(i+1))%M;
  }
}

vector<int> compute_nCr(int n){
	vector<int>ans;
	for(int r=0;r<=n;r++){
		ans.push_back((fact[n]*inverse_fact[r]%M)*inverse_fact[n-r]%M);
	}
	return ans;
}

void solve(){
int n;cin>>n;
precompute_fact(n);
vector<int> ans=compute_nCr(n);
 for (int x : ans) cout << x << " ";
    cout << endl;
}
signed main(){
	int t;cin>>t;
	while(t--){
		solve();
	}
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
this is calculation of ncr using pascal triangles method
//////////////////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;
const int M=1e9;
#define int long long
const int MAX_N=1000;

int nCr[MAX_N+1][MAX_N+1];

void precompute(){
	for(int n=0;n<=MAX_N;n++){
		nCr[n][0]=nCr[n][n]=1;
		for(int r=1;r<n;r++){
			nCr[n][r]=(nCr[n-1][r]+nCr[n-1][r-1])%M;
		}
	}
}
void solve(){
int n;cin>>n;
precompute();
for(int r=0;r<=n;r++){
	cout<<nCr[n][r]<<" ";
}
cout<<endl;
}
signed main(){
	int t;cin>>t;
	while(t--){
		solve();
	}
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////




























